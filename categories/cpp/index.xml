<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CPP on 后端技术小屋</title><link>https://backendhouse.github.io/categories/cpp/</link><description>Recent content in CPP on 后端技术小屋</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 01 Aug 2021 16:54:13 +0800</lastBuildDate><atom:link href="https://backendhouse.github.io/categories/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>C++开发环境最佳实践</title><link>https://backendhouse.github.io/post/c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 01 Aug 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 没有什么比开发环境这个话题更能引起cpp程序员的共鸣。本人从刚毕业时候的vim + ctags，到后</description></item><item><title>C++二进制文件中注入git信息</title><link>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 15 May 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在生产环境中，为了方便定位问题，我们需要根据一个binary文件获取其对应的git信息，包括编译</description></item><item><title>C++关键字之fallthrough</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</link><pubDate>Mon, 22 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在C++17中引入了fallthrough属性。该属性主要用于switch语句中。在C++的sw</description></item><item><title>C++关键字之likely和unlikely</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</link><pubDate>Mon, 08 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 流水线技术 现代CPU为了提高执行指令执行的吞吐量，使用了流水线技术，它将每条指令分解为多步，让不</description></item><item><title>现代C++之右值语义</title><link>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</link><pubDate>Sun, 07 Feb 2021 21:35:55 +0800</pubDate><guid>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 现代C++之右值语义 在现代C++的众多特性中，右值语义(std::move和std::forwa</description></item><item><title>C/C++关键字之restrict</title><link>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</link><pubDate>Sat, 06 Feb 2021 21:30:12 +0800</pubDate><guid>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 C/C++关键字之restrict 在C语言中，restrict关键字用于修饰指针(C99标准)。</description></item><item><title>C++代码模板之CRTP</title><link>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</link><pubDate>Thu, 28 Jan 2021 19:43:47 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 本文将介绍一下c++代码模板的小技巧 &amp;mdash;&amp;ndash; CRTP 虚函数 在介绍 CRTP 之前，我们先来了解下虚函数。 虚函数是通过指</description></item><item><title>STL源码分析--functional</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</link><pubDate>Thu, 28 Jan 2021 19:12:57 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 functional functional.h stl_function.h 2 一元函数对象 一元函数对象，是指这类函数对象只接受一个参数并返回一个参数。 un</description></item><item><title>STL源码分析--algorithm</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</link><pubDate>Thu, 28 Jan 2021 19:09:49 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 STL中实现了一些跟容器相关的一些算法。这里介绍algorithm头文件中一些有意思的算法实现。</description></item><item><title>STL源码分析--bitset</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</link><pubDate>Thu, 28 Jan 2021 19:08:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 bitset 2 bitset bitset中STL中用于表示位图的容器，它支持读写特定bit、从整数或字符串</description></item><item><title>STL源码分析--rbtree</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</link><pubDate>Thu, 28 Jan 2021 19:05:48 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 tree.h stl_tree.h map.h stl_map.h set.h stl_set.h 2 红黑树的实现 首先重温下红黑树的定义。同时满足以下条件的二叉树才可称之为</description></item><item><title>STL源码分析--traits</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</link><pubDate>Thu, 28 Jan 2021 19:03:12 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 traits(译作萃取)是C++中一种特殊的编程技法，它是模板元编程最直接的用例之一。通过tra</description></item><item><title>STL源码分析--iterator</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</link><pubDate>Thu, 28 Jan 2021 19:00:45 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 iterator iterator.h stl_iterator.h stl_iterator_base.h 2 输入迭代器 2.1 iterator的种类 在STL中，迭代器分为输入迭代器、输出迭</description></item><item><title>STL源码分析--deque</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</link><pubDate>Thu, 28 Jan 2021 18:55:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 deque相关头文件 deque deque.h stl_deque.h 2 deque的数据结构 deque为双向队列，同时支持从队首和队尾插入</description></item><item><title>STL源码分析--list</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</link><pubDate>Thu, 28 Jan 2021 18:47:18 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关文件 list list.h stl_list.h 2 链表节点结构 基类_List_node_base只有_M_prev, _M_pre</description></item><item><title>STL源码分析--string</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</link><pubDate>Thu, 28 Jan 2021 18:44:25 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 string的数据结构 从定义可知, string其实是base_string的特化类，strin</description></item><item><title>STL源码分析--vector</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</link><pubDate>Wed, 27 Jan 2021 23:51:24 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 stl_vector.h vector.h vector 2 内存分配 vector默认使用__default_alloc_template</description></item><item><title>STL源码分析--内存分配</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Wed, 27 Jan 2021 19:27:00 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 说明：STL采用SGI版本， 下载地址 1 相关头文件 stl_alloc.h alloc.h 2 allocator STL中默认使用的内存分配器，被广泛用于</description></item></channel></rss>