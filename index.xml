<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后端技术小屋</title><link>https://backendhouse.github.io/</link><description>Recent content on 后端技术小屋</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 28 Jan 2021 19:43:47 +0800</lastBuildDate><atom:link href="https://backendhouse.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>C++代码模板之CRTP</title><link>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</link><pubDate>Thu, 28 Jan 2021 19:43:47 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</guid><description>本文将介绍一下c++代码模板的小技巧 &amp;mdash;&amp;ndash; CRTP 虚函数 在介绍 CRTP 之前，我们先来了解下虚函数。 虚函数是通过指向派生类的基类指针或引用，访问派生类中同名覆</description></item><item><title>About</title><link>https://backendhouse.github.io/about/</link><pubDate>Thu, 28 Jan 2021 19:28:04 +0800</pubDate><guid>https://backendhouse.github.io/about/</guid><description/></item><item><title>一些有意思的shell命令</title><link>https://backendhouse.github.io/post/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84shell%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 28 Jan 2021 19:19:18 +0800</pubDate><guid>https://backendhouse.github.io/post/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84shell%E5%91%BD%E4%BB%A4/</guid><description>最近偶然看到一些有意思的shell命令，分享给大家。 fork炸弹 代码如下 :(){ :|:&amp;amp; };: 还是看不懂，将:替换成fork fork(){ fork | fork &amp;amp;} 这时候应该可以看出来了</description></item><item><title>Redis实现分布式锁</title><link>https://backendhouse.github.io/post/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Thu, 28 Jan 2021 19:17:48 +0800</pubDate><guid>https://backendhouse.github.io/post/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>一、redis分布式锁的简易实现 用redis实现分布式锁是一个老生常谈的问题了。因为redis单条命令执行的原子性和高性能，当多个客户端执行</description></item><item><title>Zookeeper Go Client原理总结</title><link>https://backendhouse.github.io/post/zookeeper-client%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 28 Jan 2021 19:15:42 +0800</pubDate><guid>https://backendhouse.github.io/post/zookeeper-client%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid><description>〇、环境 zk client: github.com/samuel/go-zookeeper 一、zk client状态 zookeeper是一款流行的分布式协调组件，被广泛用于leader选举、分布式锁、服务发现、名称服务</description></item><item><title>推荐几个好用的效率神器</title><link>https://backendhouse.github.io/post/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8/</link><pubDate>Thu, 28 Jan 2021 19:14:14 +0800</pubDate><guid>https://backendhouse.github.io/post/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 工欲善其器，必先利其器。性能与效率是程序员们永恒的追求，对代码如此，对日常搬砖也应如此。对于日常</description></item><item><title>STL源码分析--functional</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</link><pubDate>Thu, 28 Jan 2021 19:12:57 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</guid><description>往期回顾(更多精彩内容，请关注微信公众号：后端技术小屋) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL</description></item><item><title>STL源码分析--algorithm</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</link><pubDate>Thu, 28 Jan 2021 19:09:49 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</guid><description>往期回顾(更多精彩内容，请关注微信公众号：后端技术小屋) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL</description></item><item><title>STL源码分析--bitset</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</link><pubDate>Thu, 28 Jan 2021 19:08:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</guid><description>往期回顾(更多精彩内容，请关注微信公众号：后端技术小屋) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL</description></item><item><title>STL源码分析--rbtree</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</link><pubDate>Thu, 28 Jan 2021 19:05:48 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</guid><description>往期回顾(更多精彩内容，请关注微信公众号：后端技术小屋) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL</description></item><item><title>STL源码分析--traits</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</link><pubDate>Thu, 28 Jan 2021 19:03:12 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</guid><description>往期回顾(更多精彩内容，请关注微信公众号：悟空者说) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL源码</description></item><item><title>STL源码分析--iterator</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</link><pubDate>Thu, 28 Jan 2021 19:00:45 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</guid><description>往期回顾(更多精彩内容，请专注微信公众号：悟空者说) STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL源码</description></item><item><title>STL源码分析--deque</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</link><pubDate>Thu, 28 Jan 2021 18:55:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</guid><description>往期回顾 STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL源码分析&amp;ndash;string STL源码分析</description></item><item><title>STL源码分析--list</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</link><pubDate>Thu, 28 Jan 2021 18:47:18 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</guid><description>往期回顾 STL源码分析&amp;ndash;内存分配器 STL源码分析&amp;ndash;vector STL源码分析&amp;ndash;string 1 相关文件 list list.h</description></item><item><title>STL源码分析--string</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</link><pubDate>Thu, 28 Jan 2021 18:44:25 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</guid><description>1 string的数据结构 从定义可知, string其实是base_string的特化类，string使用默认的内存分配器__STL_DEFAU</description></item><item><title>STL源码分析--vector</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</link><pubDate>Wed, 27 Jan 2021 23:51:24 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</guid><description>1 相关头文件 stl_vector.h vector.h vector 2 内存分配 vector默认使用__default_alloc_template分配内存，该分配器是线程安全的，具体可见ST</description></item><item><title>STL源码分析--内存分配</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Wed, 27 Jan 2021 19:27:00 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description>说明：STL采用SGI版本， 下载地址 1 相关头文件 stl_alloc.h alloc.h 2 allocator STL中默认使用的内存分配器，被广泛用于vector, hashmap, deque等数据结构中 该类实</description></item></channel></rss>