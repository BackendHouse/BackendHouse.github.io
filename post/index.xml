<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 后端技术小屋</title><link>https://backendhouse.github.io/post/</link><description>Recent content in Posts on 后端技术小屋</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 19 Jul 2021 16:54:13 +0800</lastBuildDate><atom:link href="https://backendhouse.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>golang日常开发系列之三--mysql时间戳解析</title><link>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89-mysql%E6%97%B6%E9%97%B4%E6%88%B3%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 19 Jul 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89-mysql%E6%97%B6%E9%97%B4%E6%88%B3%E8%A7%A3%E6%9E%90/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在用golang进行后端开发时，总免不了要和mysql打交道。我们一般使用库github.com</description></item><item><title>golang日常开发系列之二--巧用defer</title><link>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C-%E5%B7%A7%E7%94%A8defer/</link><pubDate>Sun, 18 Jul 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C-%E5%B7%A7%E7%94%A8defer/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 我们都知道，在golang中，有一种语言特性跟C++中的RAII特别相似，那就是defer。例如</description></item><item><title>golang日常开发系列之一--defer的那些坑</title><link>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80-defer%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</link><pubDate>Sat, 10 Jul 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/golang%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80-defer%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 最近集中开发了一波golang, 因此打算开启一个坑，就叫golang日常开发系列，用于总结这段时</description></item><item><title>如何将linux前台任务转后台运行</title><link>https://backendhouse.github.io/post/%E5%A6%82%E4%BD%95%E5%B0%86linux%E5%89%8D%E5%8F%B0%E4%BB%BB%E5%8A%A1%E8%BD%AC%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link><pubDate>Wed, 16 Jun 2021 10:09:21 +0800</pubDate><guid>https://backendhouse.github.io/post/%E5%A6%82%E4%BD%95%E5%B0%86linux%E5%89%8D%E5%8F%B0%E4%BB%BB%E5%8A%A1%E8%BD%AC%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 学过linux的童鞋们都知道，在命令行中启动某个任务有两种方式，一种是前台，一种是后台。 一般来说</description></item><item><title>C++二进制文件中注入git信息</title><link>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 15 May 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在生产环境中，为了方便定位问题，我们需要根据一个binary文件获取其对应的git信息，包括编译</description></item><item><title>Boltdb学习笔记之三--事务与并发控制</title><link>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%89-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><pubDate>Thu, 15 Apr 2021 09:24:05 +0800</pubDate><guid>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%89-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid><description>如果说数据库是软件工程领域的皇冠，而事务与并发控制可称之为皇冠上的钻石。本节将详细分析boltdb中如何实现事务与并发控制 事务 事务定义 bol</description></item><item><title>C++关键字之fallthrough</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</link><pubDate>Mon, 22 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在C++17中引入了fallthrough属性。该属性主要用于switch语句中。在C++的sw</description></item><item><title>Boltdb学习笔记之一--存储管理</title><link>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 20 Mar 2021 09:24:05 +0800</pubDate><guid>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 磁盘和内存的管理 磁盘是持久化存储，内存是非持久化存储。当数据库执行查询时，会以page为单位的读</description></item><item><title>Boltdb学习笔记之二--数据结构</title><link>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Sat, 20 Mar 2021 09:24:05 +0800</pubDate><guid>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>在boltdb中，最核心的数据结构当属B+树了。B+树是数据库或文件系统中常见的数据结构，它的特点是能够保证数据稳定有序，因为每个叶子节点的</description></item><item><title>clickhouse集群zookeeper平滑搬迁实践</title><link>https://backendhouse.github.io/post/clickhouse%E9%9B%86%E7%BE%A4zookeeper%E5%B9%B3%E6%BB%91%E6%90%AC%E8%BF%81%E5%AE%9E%E8%B7%B5/</link><pubDate>Wed, 17 Mar 2021 16:18:25 +0800</pubDate><guid>https://backendhouse.github.io/post/clickhouse%E9%9B%86%E7%BE%A4zookeeper%E5%B9%B3%E6%BB%91%E6%90%AC%E8%BF%81%E5%AE%9E%E8%B7%B5/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 〇、背景 注：为简化表述，本文中将clickhouse简称为ck, 将zookeeper简称为zk。</description></item><item><title>zookeeper动态配置应用</title><link>https://backendhouse.github.io/post/zookeeper_dynamic_config/</link><pubDate>Wed, 17 Mar 2021 14:22:52 +0800</pubDate><guid>https://backendhouse.github.io/post/zookeeper_dynamic_config/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 〇、背景 在zookeeper 3.5.0版本之前，其配置不支持动态加载，只能通过重启加载新配置。因</description></item><item><title>如何在Bash脚本中引入alias</title><link>https://backendhouse.github.io/post/%E5%A6%82%E4%BD%95%E5%9C%A8bash%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%BC%95%E5%85%A5alias/</link><pubDate>Mon, 08 Mar 2021 21:17:10 +0800</pubDate><guid>https://backendhouse.github.io/post/%E5%A6%82%E4%BD%95%E5%9C%A8bash%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%BC%95%E5%85%A5alias/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 alias的使用 在日常开发中，为了提高运维效率，我们会用alias(命令别名)来定义命令的简称。</description></item><item><title>【译】Clickhouse与LDAP集成（一）</title><link>https://backendhouse.github.io/post/%E8%AF%91clickhouse%E4%B8%8Eldap%E9%9B%86%E6%88%90%E4%B8%80/</link><pubDate>Mon, 08 Mar 2021 14:23:08 +0800</pubDate><guid>https://backendhouse.github.io/post/%E8%AF%91clickhouse%E4%B8%8Eldap%E9%9B%86%E6%88%90%E4%B8%80/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 原文：https://altinity.com/blog/integrating-clickho</description></item><item><title>C++关键字之likely和unlikely</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</link><pubDate>Mon, 08 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 流水线技术 现代CPU为了提高执行指令执行的吞吐量，使用了流水线技术，它将每条指令分解为多步，让不</description></item><item><title>Zookeeper源码编译打包与逆向工程</title><link>https://backendhouse.github.io/post/zookeeper%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E4%B8%8E%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link><pubDate>Mon, 08 Mar 2021 10:09:21 +0800</pubDate><guid>https://backendhouse.github.io/post/zookeeper%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E4%B8%8E%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 最近要将zookeeper静态版本升级到动态版本(为什么升级，如何升级是另一个话题了，后续我将专</description></item><item><title>Boltdb学习笔记之〇--概述</title><link>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B-%E6%A6%82%E8%BF%B0/</link><pubDate>Sun, 07 Mar 2021 20:28:52 +0800</pubDate><guid>https://backendhouse.github.io/post/boltdb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B-%E6%A6%82%E8%BF%B0/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 看了boltdb也有一阵子了，看完之后总想写点什么，因为感觉到这可能是个不小的坑，所以迟迟没有动</description></item><item><title>分享一个有意思的gdb插件</title><link>https://backendhouse.github.io/post/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84gdb%E6%8F%92%E4%BB%B6/</link><pubDate>Sun, 07 Mar 2021 10:40:05 +0800</pubDate><guid>https://backendhouse.github.io/post/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84gdb%E6%8F%92%E4%BB%B6/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 最近在一个技术分享上听说了一个有意思的gdb插件：peta(https://github.com</description></item><item><title>一文读懂clickhouse集群监控</title><link>https://backendhouse.github.io/post/clickhouse-monitor/</link><pubDate>Sun, 28 Feb 2021 10:07:14 +0800</pubDate><guid>https://backendhouse.github.io/post/clickhouse-monitor/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 一文读懂clickhouse集群监控 常言道，兵马未至，粮草先行，在clickhouse上生产环境</description></item><item><title>《赢》读书笔记</title><link>https://backendhouse.github.io/post/%E8%B5%A2%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 27 Feb 2021 15:16:21 +0800</pubDate><guid>https://backendhouse.github.io/post/%E8%B5%A2%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 书籍信息： 赢(第2版)（中信商业经典） 杰克•韦尔奇 (Jack Welch) 很久之前便多次听说过这本书。现在已经202</description></item><item><title>《暗时间》读书笔记</title><link>https://backendhouse.github.io/post/%E6%9A%97%E6%97%B6%E9%97%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 27 Feb 2021 14:31:04 +0800</pubDate><guid>https://backendhouse.github.io/post/%E6%9A%97%E6%97%B6%E9%97%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 如果把大脑比作一个CPU, 我们日常的工作、生活、学习类似CPU处理前台任务，而暗时间就像CPU处</description></item><item><title>30分钟入门Vim</title><link>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8vim/</link><pubDate>Thu, 25 Feb 2021 17:32:08 +0800</pubDate><guid>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8vim/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 30分钟入门Vim Vim是从vi发展出来的一个文本编辑器，是Linux后端开发人员必会工具之一，</description></item><item><title>30分钟入门GDB</title><link>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8gdb/</link><pubDate>Wed, 24 Feb 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8gdb/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 GDB全称GDB Debugger。GDB具备各种调试功能，使用GDB的调试人员可以查看及修改程序</description></item><item><title>《Linux Shell脚本攻略》读书笔记</title><link>https://backendhouse.github.io/post/linux-shell%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5/</link><pubDate>Wed, 10 Feb 2021 15:13:04 +0800</pubDate><guid>https://backendhouse.github.io/post/linux-shell%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 《Linux Shell脚本攻略》是一本适合初学者系统学习Bash Shell的书籍，墙裂推荐。以下</description></item><item><title>Python编码问题九问</title><link>https://backendhouse.github.io/post/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98faq/</link><pubDate>Mon, 08 Feb 2021 21:26:18 +0800</pubDate><guid>https://backendhouse.github.io/post/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98faq/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 大家可能和我一样，在Python日常开发过程中会遇到各种各样的编码问题。因此在此以个人的踩坑经验</description></item><item><title>现代C++之右值语义</title><link>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</link><pubDate>Sun, 07 Feb 2021 21:35:55 +0800</pubDate><guid>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 现代C++之右值语义 在现代C++的众多特性中，右值语义(std::move和std::forwa</description></item><item><title>C/C++关键字之restrict</title><link>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</link><pubDate>Sat, 06 Feb 2021 21:30:12 +0800</pubDate><guid>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 C/C++关键字之restrict 在C语言中，restrict关键字用于修饰指针(C99标准)。</description></item><item><title>C++代码模板之CRTP</title><link>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</link><pubDate>Thu, 28 Jan 2021 19:43:47 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E4%B9%8Bcrtp/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 本文将介绍一下c++代码模板的小技巧 &amp;mdash;&amp;ndash; CRTP 虚函数 在介绍 CRTP 之前，我们先来了解下虚函数。 虚函数是通过指</description></item><item><title>一些有意思的shell命令</title><link>https://backendhouse.github.io/post/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84shell%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 28 Jan 2021 19:19:18 +0800</pubDate><guid>https://backendhouse.github.io/post/%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84shell%E5%91%BD%E4%BB%A4/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 最近偶然看到一些有意思的shell命令，分享给大家。 fork炸弹 代码如下 :(){ :|:&amp;amp; };: 还是看不懂，将:替</description></item><item><title>Redis实现分布式锁</title><link>https://backendhouse.github.io/post/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Thu, 28 Jan 2021 19:17:48 +0800</pubDate><guid>https://backendhouse.github.io/post/redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 一、redis分布式锁的简易实现 用redis实现分布式锁是一个老生常谈的问题了。因为redis单</description></item><item><title>Zookeeper Go Client原理总结</title><link>https://backendhouse.github.io/post/zookeeper-client%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 28 Jan 2021 19:15:42 +0800</pubDate><guid>https://backendhouse.github.io/post/zookeeper-client%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 〇、环境 zk client: github.com/samuel/go-zookeeper 一、zk client状态 zookeeper是一款流行的分布式协调组件，被广泛用于l</description></item><item><title>推荐几个好用的效率神器</title><link>https://backendhouse.github.io/post/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8/</link><pubDate>Thu, 28 Jan 2021 19:14:14 +0800</pubDate><guid>https://backendhouse.github.io/post/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 工欲善其器，必先利其器。性能与效率是程序员们永恒的追求，对代码如此，对日常搬砖也应如此。对于日常</description></item><item><title>STL源码分析--functional</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</link><pubDate>Thu, 28 Jan 2021 19:12:57 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-functional/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 functional functional.h stl_function.h 2 一元函数对象 一元函数对象，是指这类函数对象只接受一个参数并返回一个参数。 un</description></item><item><title>STL源码分析--algorithm</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</link><pubDate>Thu, 28 Jan 2021 19:09:49 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-algorithm/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 STL中实现了一些跟容器相关的一些算法。这里介绍algorithm头文件中一些有意思的算法实现。</description></item><item><title>STL源码分析--bitset</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</link><pubDate>Thu, 28 Jan 2021 19:08:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-bitset/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 bitset 2 bitset bitset中STL中用于表示位图的容器，它支持读写特定bit、从整数或字符串</description></item><item><title>STL源码分析--rbtree</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</link><pubDate>Thu, 28 Jan 2021 19:05:48 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rbtree/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 tree.h stl_tree.h map.h stl_map.h set.h stl_set.h 2 红黑树的实现 首先重温下红黑树的定义。同时满足以下条件的二叉树才可称之为</description></item><item><title>STL源码分析--traits</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</link><pubDate>Thu, 28 Jan 2021 19:03:12 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-traits/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 traits(译作萃取)是C++中一种特殊的编程技法，它是模板元编程最直接的用例之一。通过tra</description></item><item><title>STL源码分析--iterator</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</link><pubDate>Thu, 28 Jan 2021 19:00:45 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-iterator/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 iterator iterator.h stl_iterator.h stl_iterator_base.h 2 输入迭代器 2.1 iterator的种类 在STL中，迭代器分为输入迭代器、输出迭</description></item><item><title>STL源码分析--deque</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</link><pubDate>Thu, 28 Jan 2021 18:55:36 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-deque/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 deque相关头文件 deque deque.h stl_deque.h 2 deque的数据结构 deque为双向队列，同时支持从队首和队尾插入</description></item><item><title>STL源码分析--list</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</link><pubDate>Thu, 28 Jan 2021 18:47:18 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-list/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关文件 list list.h stl_list.h 2 链表节点结构 基类_List_node_base只有_M_prev, _M_pre</description></item><item><title>STL源码分析--string</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</link><pubDate>Thu, 28 Jan 2021 18:44:25 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-string/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 string的数据结构 从定义可知, string其实是base_string的特化类，strin</description></item><item><title>STL源码分析--vector</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</link><pubDate>Wed, 27 Jan 2021 23:51:24 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-vector/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 1 相关头文件 stl_vector.h vector.h vector 2 内存分配 vector默认使用__default_alloc_template</description></item><item><title>STL源码分析--内存分配</title><link>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Wed, 27 Jan 2021 19:27:00 +0800</pubDate><guid>https://backendhouse.github.io/post/stl%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 说明：STL采用SGI版本， 下载地址 1 相关头文件 stl_alloc.h alloc.h 2 allocator STL中默认使用的内存分配器，被广泛用于</description></item></channel></rss>