<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CPP on 后端技术小屋</title><link>https://backendhouse.github.io/tags/cpp/</link><description>Recent content in CPP on 后端技术小屋</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 18 Dec 2021 15:16:21 +0800</lastBuildDate><atom:link href="https://backendhouse.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>现代cmake--阅读笔记.md</title><link>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3cmake-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 18 Dec 2021 15:16:21 +0800</pubDate><guid>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3cmake-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>1. Running cmake 1.1. cmake选项 &amp;ndash;build 指定输出目录 -j 指定并行度 &amp;ndash;target 指定编译目标 1.2. 选择编译器 EXPORT CC=clang CXX=clang++ cmake .. 1.3. 选择生成器 默认为make 通过cmake -G Ninja指定</description></item><item><title>vscode c++远程调试实战</title><link>https://backendhouse.github.io/post/vscode-c++%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98/</link><pubDate>Thu, 02 Dec 2021 15:16:21 +0800</pubDate><guid>https://backendhouse.github.io/post/vscode-c++%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%AE%9E%E6%88%98/</guid><description>在上两篇文章1，文章2中，我们介绍了c++开发的最佳实践，以及一些常见问题的解决方案。虽然笔者一直用vscode + remote-ssh + clangd阅读代码，</description></item><item><title>vscode clangd c++开发常见问题和解决方案</title><link>https://backendhouse.github.io/post/vscode-clangd%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A4%B4%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link><pubDate>Wed, 01 Dec 2021 15:16:21 +0800</pubDate><guid>https://backendhouse.github.io/post/vscode-clangd%E6%89%BE%E4%B8%8D%E5%88%B0%E5%A4%B4%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid><description>在上一篇文章中，我们推荐了vscode + remote-ssh + clangd这种C++开发方式。在本文中，我们将总结使用这种方式的过程中遇到的常见问题及其解决方</description></item><item><title>一个怪异的C++函数定义方式</title><link>https://backendhouse.github.io/post/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84c++%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 21 Sep 2021 09:23:08 +0800</pubDate><guid>https://backendhouse.github.io/post/%E4%B8%80%E4%B8%AA%E6%80%AA%E5%BC%82%E7%9A%84c++%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F/</guid><description>在阅读clickhouse代码的过程中，发现有一种函数定义形式很怪异，一度以为是代码写错了。。。 int main() try { XXX } catch (DB::Exception &amp;amp; e) { XXX } 形式如上，函数名之</description></item><item><title>C++开发环境最佳实践</title><link>https://backendhouse.github.io/post/c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 01 Aug 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 没有什么比开发环境这个话题更能引起cpp程序员的共鸣。本人从刚毕业时候的vim + ctags，到后</description></item><item><title>C++二进制文件中注入git信息</title><link>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 15 May 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%85%A5git%E4%BF%A1%E6%81%AF/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在生产环境中，为了方便定位问题，我们需要根据一个binary文件获取其对应的git信息，包括编译</description></item><item><title>C++关键字之fallthrough</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</link><pubDate>Mon, 22 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Bfallthrough/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 在C++17中引入了fallthrough属性。该属性主要用于switch语句中。在C++的sw</description></item><item><title>C++关键字之likely和unlikely</title><link>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</link><pubDate>Mon, 08 Mar 2021 10:18:48 +0800</pubDate><guid>https://backendhouse.github.io/post/c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Blikely%E5%92%8Cunlikely/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 流水线技术 现代CPU为了提高执行指令执行的吞吐量，使用了流水线技术，它将每条指令分解为多步，让不</description></item><item><title>30分钟入门GDB</title><link>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8gdb/</link><pubDate>Wed, 24 Feb 2021 16:54:13 +0800</pubDate><guid>https://backendhouse.github.io/post/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8gdb/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 GDB全称GDB Debugger。GDB具备各种调试功能，使用GDB的调试人员可以查看及修改程序</description></item><item><title>现代C++之右值语义</title><link>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</link><pubDate>Sun, 07 Feb 2021 21:35:55 +0800</pubDate><guid>https://backendhouse.github.io/post/%E7%8E%B0%E4%BB%A3c++%E4%B9%8B%E5%8F%B3%E5%80%BC%E8%AF%AD%E4%B9%89/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 现代C++之右值语义 在现代C++的众多特性中，右值语义(std::move和std::forwa</description></item><item><title>C/C++关键字之restrict</title><link>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</link><pubDate>Sat, 06 Feb 2021 21:30:12 +0800</pubDate><guid>https://backendhouse.github.io/post/c-c++%E5%85%B3%E9%94%AE%E5%AD%97%E4%B9%8Brestrict/</guid><description>更多精彩内容，请关注微信公众号：后端技术小屋 C/C++关键字之restrict 在C语言中，restrict关键字用于修饰指针(C99标准)。</description></item></channel></rss>